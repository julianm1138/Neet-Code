Valid Sudoku
You are given a a 9 x 9 Sudoku board board. A Sudoku board is valid if the following rules are followed:

Each row must contain the digits 1-9 without duplicates.
Each column must contain the digits 1-9 without duplicates.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without duplicates.
Return true if the Sudoku board is valid, otherwise return false

Note: A board does not need to be full or be solvable to be valid.

![Alt text](https://imagedelivery.net/CLfkmk9Wzy8_9HRyug4EVA/0be40c5d-2d18-42b8-261b-13ca50de4100/public)
<img src="https://imagedelivery.net/CLfkmk9Wzy8_9HRyug4EVA/0be40c5d-2d18-42b8-261b-13ca50de4100/public">


//We can solve this by checking if every group on the grid (row, col, and subgrid) has duplicates.
// First make a helper function removing all "." then comparing original length to set size.
// Then extract the columns. We can make a 2d array of all the columns in the grid.
// Then extract the subgrids. We can make a 2s array of all the subgrids by looping 3 elements at a time for both the rows and columns. 
// The rows are already the grid.
// Make the allGroups function which extracts the rows, cols, and subgrids from the grid.
// Finally, use allGroups with the board passed into it and chain every with checkDuplicates to return true if every group is duplicate-free. 


  isValidSudoku(board) {

const checkDuplicates = arr => {
  let flatArr = arr.flat();
  flatArr = flatArr.filter(element => element !== ".");
  const set = new Set(flatArr);
  return flatArr.length === set.size;
};

const getColumns = grid => {
  const columns = [];
  for (let col = 0; col < 9; col++) {
    const column = [];
    for (let row = 0; row < 9; row++) {
      column.push(grid[row][col]);
    }
    columns.push(column);
  }
  return columns;
};

const getSubgrids = grid => {
  const subgrids = [];
  for (let rowStart = 0; rowStart < 9; rowStart += 3) {
    for (let colStart = 0; colStart < 9; colStart += 3) {
      const subgrid = [];
      for (let row = rowStart; row < rowStart + 3; row++) {
        for (let col = colStart; col < colStart + 3; col++) {
          subgrid.push(grid[row][col]);
        }
      }
      subgrids.push(subgrid);
    }
  }
  return subgrids;
};

const allGroups = grid => {
  const rows = grid;
  const columns = getColumns(grid);
  const subgrids = getSubgrids(grid);
  
  return [...rows, ...columns, ...subgrids];
};

return allGroups(board).every(checkDuplicates);

