You are given a string s consisting of the following characters: '(', ')', '{', '}', '[' and ']'.

The input string s is valid if and only if:

Every open bracket is closed by the same type of close bracket.
Open brackets are closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Return true if s is a valid string, and false otherwise.

// We can solve this with a stack and object. 
// We use a stack because we are potentially dealing with nested brackets and need a way to efficiently check each pair.
// If the current character exists as a key in the obejct (open brackets only), push it on the stack.
// Else pop the opening bracket so we can check if it matches the current character in the object. 
// If all the characters match the stack should be empty. Otherwise immediately return false to be exit the loop as quickly as possible. 


 isValid(s) {
        let stack = [];

        const pairs = { '(': ')', '{': '}', '[': ']'};

        for (let char of s) {
            if (pairs.hasOwnProperty(char)) {
                stack.push(char);
            } else {
         const top = stack.pop();
           if (pairs[top] !== char) {
            return false;
            }
         }
     }  
         return stack.length === 0;
    }
