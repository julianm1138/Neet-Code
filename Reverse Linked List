Given the beginning of a singly linked list head, reverse the list, and return the new beginning of the list.

// If our linked list is [0] -> [1] -> [2] we need to output [2] -> [1] -> [0] and return [2].
// We can think of the linked list in JS as objects that contain a value and a pointer to the next object in the list.
// [0] -> [1] -> [2] -> null
// Model two pointers: current and previous. Current is set to the first node. Previous is set to null because there is nothing before the first node.
// Loop through the linked list
// Break the first link to isolate the first node **make the head point to null**  [0] -> null
// Point to the last node in the reversed linked list.
// Move curr pointer to the next node

// So we are basically reconstructing the linked list by starting from null and then building node by node starting from [0] and going to the left.
// So basically we can imagine starting the build on the right as null. Then [0] -> null, then [1] -> [0] -> null , then [2] -> [1] -> [0] -> null

reverseList(head) {

        let curr = head;  
        let prev = null;                            

       while (curr !== null) {
        let nextNode = curr.next;   //Save the next node 
        curr.next = prev;    //**make the head point to null**  [0] -> null
        prev = curr;         //point to the last node in the reversed linked list (null will point to [0] then [0] will point to [1], etc. because without pointing to the previous node we cannot rebuild the LL in the reverse order) 
        curr = nextNode;     //move curr to the saved node
       
       }
        return prev;
    }
