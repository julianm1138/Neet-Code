You are given the head of a linked list of length n. Unlike a singly linked list, each node contains an additional pointer random, which may point to any node in the list, or null.

Create a deep copy of the list.

The deep copy should consist of exactly n new nodes, each including:

The original value val of the copied node
A next pointer to the new node corresponding to the next pointer of the original node
A random pointer to the new node corresponding to the random pointer of the original node
Note: None of the pointers in the new list should point to nodes in the original list.

Return the head of the copied linked list.

// We cannot simply create a new node and place the head in it because that will only reference the first node in the LL.
// We can solve this by iterating through the LL using two separate loops. The first while loop will make a map of the original LL with the key being the original node and the value being a duplicate.
// The second loop will go through the map by using the while loop (referencing the original LL) and make a copy inside the map. 



 copyRandomList(head) {

        if (!head) return null;

        const nodeMap = new Map();

        let current = head;

        while (current) {
            nodeMap.set(current, new Node(current.val))
            current = current.next;
        }

        current = head;

        while (current) {
            let newNode = nodeMap.get(current);
            newNode.next = nodeMap.get(current.next) || null;     //iterate the next property mirroring the head
            newNode.random = nodeMap.get(current.random) || null;  //iterate the random property mirroring the head
            current = current.next;                                //this is what iterates the original, so we don't need to set .next for the previous two
        }

        return nodeMap.get(head);
        
    }
