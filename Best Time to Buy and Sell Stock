You are given an integer array prices where prices[i] is the price of NeetCoin on the ith day.

You may choose a single day to buy one NeetCoin and choose a different day in the future to sell it.

Return the maximum profit you can achieve. You may choose to not make any transactions, in which case the profit would be 0.


// To get the max profit we need the difference between the min price and max price from that point. 
// We can solve this by using two pointers where the first pointer will get the min price and the second pointer will check the rest of the array for each profit.
// Start the first pointer at index 0 and second at index 1. The loop will run from second pointer to the end of the array.

// If we find a new min price, move the first pointer to be that min price (assign minPointer to be the second pointer, which will move the index and effectively change the minPointer's value to be the min value).
// When we are at the min value, we can use the second pointer to get the differences between every price in the array and the min value.
// Finally, get the maxProfit of all the profits. 

// So the key is to define the loop condition, assign the minPointer to be the min value else get the current profit, update the max profit, and repeat.

 maxProfit(prices) {

        let minPointer = 0;
        let pointerB = 1;
        let maxProfit = 0;
        while (pointerB < prices.length) {                  [10,1,5,6,7,1]
            if (prices[minPointer] > prices[pointerB]) {
                minPointer = pointerB;
            } else {
              let profit = prices[pointerB] - prices[minPointer];
              maxProfit = Math.max(maxProfit, profit);
            }
            pointerB++;   
        }
              return maxProfit;      
       
    }
